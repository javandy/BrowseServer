// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.wm.bs.web;

import com.wm.bs.domain.Wm_web_login;
import com.wm.bs.web.Wm_web_loginController;
import java.util.List;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

privileged aspect Wm_web_loginController_Roo_Controller_Json {
    
    @RequestMapping(headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> Wm_web_loginController.listJson() {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        List<Wm_web_login> result = Wm_web_login.findAllWm_web_logins();
        return new ResponseEntity<String>(Wm_web_login.toJsonArray(result), headers, HttpStatus.OK);
    }
    
    @RequestMapping(method = RequestMethod.POST, headers = "Accept=application/json")
    public ResponseEntity<String> Wm_web_loginController.createFromJson(@RequestBody String json) {
        Wm_web_login wm_web_login = Wm_web_login.fromJsonToWm_web_login(json);
        wm_web_login.persist();
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        return new ResponseEntity<String>(headers, HttpStatus.CREATED);
    }
    
    @RequestMapping(value = "/jsonArray", method = RequestMethod.POST, headers = "Accept=application/json")
    public ResponseEntity<String> Wm_web_loginController.createFromJsonArray(@RequestBody String json) {
        for (Wm_web_login wm_web_login: Wm_web_login.fromJsonArrayToWm_web_logins(json)) {
            wm_web_login.persist();
        }
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        return new ResponseEntity<String>(headers, HttpStatus.CREATED);
    }
    
    @RequestMapping(method = RequestMethod.PUT, headers = "Accept=application/json")
    public ResponseEntity<String> Wm_web_loginController.updateFromJson(@RequestBody String json) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        Wm_web_login wm_web_login = Wm_web_login.fromJsonToWm_web_login(json);
        if (wm_web_login.merge() == null) {
            return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
        }
        return new ResponseEntity<String>(headers, HttpStatus.OK);
    }
    
    @RequestMapping(value = "/jsonArray", method = RequestMethod.PUT, headers = "Accept=application/json")
    public ResponseEntity<String> Wm_web_loginController.updateFromJsonArray(@RequestBody String json) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        for (Wm_web_login wm_web_login: Wm_web_login.fromJsonArrayToWm_web_logins(json)) {
            if (wm_web_login.merge() == null) {
                return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
            }
        }
        return new ResponseEntity<String>(headers, HttpStatus.OK);
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE, headers = "Accept=application/json")
    public ResponseEntity<String> Wm_web_loginController.deleteFromJson(@PathVariable("id") Long id) {
        Wm_web_login wm_web_login = Wm_web_login.findWm_web_login(id);
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        if (wm_web_login == null) {
            return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
        }
        wm_web_login.remove();
        return new ResponseEntity<String>(headers, HttpStatus.OK);
    }
    
}
